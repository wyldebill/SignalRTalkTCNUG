LONG POLLING MVC, Server side

// add the action method that starts the poll, using async and await
        [HttpGet]
        public async Task<string> LongPoll()
        {
            string theMessage = await _nextMessage.Task;

            return theMessage;
        }

		
=========================================================================================
// add the action method that responds to the message sent from clients.
        [HttpPost]
        public void PostMessage(string message)
        {
            _nextMessage.SetResult(message);
            _nextMessage = new TaskCompletionSource<string>();

        }
		
===========================================================================================

// add the member variable for the taskcompletionsource
       static TaskCompletionSource<string> _nextMessage
          = new TaskCompletionSource<string>();

		   
============================================================================================		   


==========================================================================================
client side javascript
===========================================================================================
       // add click event to post the message to the server
	   
        $(".btn-submit").click(function () {

            //send chat message to server
            $.ajax({
                type: "POST",
                url: "/chat/PostMessage",
                data: { message: $("#txtMessage").val() }
            });

            //reset textbox
            $("#txtMessage").val("");

        });
		 
		 
===========================================================================================
		// immediate fn to kick off the inital poll
        (function longPoll() {

            $.ajax({
                type: "GET",
                url: "chat/LongPoll",
                cache: false,    // defeat the 304 status that plaques IE
                success: function (message) {
                    //when response is recieved, update list and call this function again
                    $("<li>").text(message).appendTo("#messages");

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log("error: " + errorThrown);
                },
                complete: longPoll
            });

        })();  // immediately evaluated function		 

		
=============================================================================================
	@* html for the ui in index.cshtml *@
	<h2>Chatty Chat Chat</h2>

    <ul id="messages"></ul>

    Say something: <input type="text" id="txtMessage" />
    <button class="btn-submit">Submit</button>
			   
